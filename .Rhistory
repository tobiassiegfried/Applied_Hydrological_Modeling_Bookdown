library(units)
# Install GitHub version
library(devtools)
install_github("ecor/RMAWGEN")
library(RMAWGEN)
knitr::include_graphics("./_bookdown_files/FIG_DATA/RMAWGEN_Models_monthlyTotalsComparison.jpg")
knitr::include_graphics("./_bookdown_files/FIG_DATA/RMAWGEN_Models_qqplot.jpg")
# 1. Station Data
## Load and process RS MINERVE csv database file
filePath <- './data/AmuDarya/GuntYashikul/RSMinerve/'
fileName <- 'Gunt_Yashikul_1981_2013_db.csv'
era5_gunt_yashikul <- read.table(paste0(filePath,fileName),sep=',') %>% as_tibble()
## Delete unused catchments in the Gunt-Yashikul hydrological model (this is specific to the model and does not need to be carried out normally)
idx2del <- (era5_gunt_yashikul[1,]=='Gunt_DS_1') | (era5_gunt_yashikul[1,]=='Gunt_DS_2') |
(era5_gunt_yashikul[1,]=='Gunt_DS_3')
era5_gunt_yashikul <- era5_gunt_yashikul %>% dplyr::select(which(!idx2del))
## Generate list containing all station data (this is an input to the wgen_daily_PT() function)
station_data <- prepare_RMAWGEN_input_data(era5_gunt_yashikul)
# 2. RMAWGEN PARAMETERS
## Note: all parameteres are stored in the param list
param <- list()
## Random generator seed
param$seed <- 123456
## Monthly climate is calculated if it is set to NULL
param$PREC_CLIMATE <- NULL
## Calibration Period
param$year_min <- 1981
param$year_max <- 2013
param$origin <- "1981-1-1"
## n GPCA iterations for variable and VAR residuals
param$n_GPCA_iter <- 0
param$n_GPCA_iteration_residuals <- 0
param$n_GPCA_iter_prec <- 0
param$n_GPCA_iteration_residuals_prec <- 0
## Autoregressive order (p)
param$p <- 1
# number of weather realizations
param$nscenario <- 1
# Multi-site stations
param$station <- station_data$STATION_NAMES
# Minimum precipitation cutoff value, i.e. threshold value below which a no precipitation event is recorded [in mm/day]
param$valmin <- 1.0
# 3. Compute stochastic weather for a subset of 2 sample stations for the calibration period 1981 - 2013
clim_scen <- NULL # We not yet simulate future climate. This follows in the next Subsection below.
station_subset <- station_data$STATION_NAMES[1:2] # Selecting 2 example stations, i.e. Alishur_2 and Alishur_3
PT_sim <- wgen_daily_PT(param,station_data,station_subset,clim_scen)
knitr::include_graphics("_bookdown_files/FIG_DATA/Gunt_Outline.jpg")
knitr::include_graphics("_bookdown_files/FIG_DATA/Gunt_Subbasins.jpg")
knitr::include_graphics("_bookdown_files/FIG_DATA/Gunt_Subbasins_ElevationBands.jpg")
knitr::include_graphics('_bookdown_files/FIG_DATA/Gunt_Topology.jpg')
knitr::include_graphics('_bookdown_files/FIG_DATA/Gunt_ElevationBands_AttributeTable.jpg')
knitr::include_graphics("_bookdown_files/FIG_DATA/greenhouseGasConcetrations_RCP.jpg")
station_subset_sumStat <- station_subset
summaryStats <- wgen_daily_summaryStats(PT_sim, param, station_data, station_subset_sumStat)
?wgen_daily_summaryStats
summaryStats <- wgen_daily_summaryStats(PT_sim, param, station_data, station_subset_sumStat,clim_scen)
station_subset
summaryStats <- wgen_daily_summaryStats(PT_sim, param, station_data, station_subset_sumStat,clim_scen)
summaryStats <- wgen_daily_summaryStats(PT_sim, param, station_data, station_subset_sumStat,clim_scen)
wgen_daily_summaryStats <- function(PT_sim,param,station_data,station_subset,clim_scen){
summaryStats <- wgen_daily_summaryStats(PT_sim, param, station_data, station_subset_sumStat,clim_scen)
if (base::is.null(station_subset)){
station_subset = param$station
}
climStats <- list()
for (idx in (1:length(station_subset))){
# PRECIPITATION
# baseline period
baseline_station_P <- station_data$PRECIPITATION %>%
dplyr::select(year,station_subset[idx]) %>%
dplyr::filter(year>=param$year_min_Baseline & year <= param$year_max_Baseline) %>%
dplyr::select(-year) %>%
dplyr::rename(P_baseline_obs = station_subset[idx])
baseline_station_P_stats <- base::as.data.frame(apply(baseline_station_P,2,summary)) # render the summary() function as dataframe
# future period
futurePeriod_station_P <- PT_sim$P_gen$prec_gen %>% tibble::as_tibble() %>% dplyr::select(station_subset[idx])
if (is.null(clim_scen)){
futurePeriod_station_P <- futurePeriod_station_P %>% dplyr::rename(P_baseline_sim = station_subset[idx])
} else {
futurePeriod_station_P <- futurePeriod_station_P %>% dplyr::rename(P_futurePeriod_sim = station_subset[idx])
}
futurePeriod_station_P_stats <- base::as.data.frame(apply(futurePeriod_station_P,2,summary))
# TMIN
baseline_station_Tmin <- station_data$TEMPERATURE_MIN %>%
dplyr::select(year,station_subset[idx]) %>%
dplyr::filter(year>=param$year_min_Baseline & year <= param$year_max_Baseline) %>%
dplyr::select(-year) %>%
dplyr::rename(Tmin_baseline_obs = station_subset[idx])
baseline_station_Tmin_stats <- base::as.data.frame(apply(baseline_station_Tmin,2,summary))
# future period
futurePeriod_station_Tmin <- PT_sim$T_gen$output$Tn_gen %>% tibble::as_tibble() %>% dplyr::select(station_subset[idx])
if (is.null(clim_scen)){
futurePeriod_station_Tmin <- futurePeriod_station_Tmin %>% dplyr::rename(Tmin_baseline_sim = station_subset[idx])
} else {
futurePeriod_station_Tmin <- futurePeriod_station_Tmin %>% dplyr::rename(Tmin_futurePeriod_sim = station_subset[idx])
}
futurePeriod_station_Tmin_stats <- base::as.data.frame(apply(futurePeriod_station_Tmin,2,summary))
# TMAX
baseline_station_Tmax <- station_data$TEMPERATURE_MAX %>%
dplyr::select(year,station_subset[idx]) %>%
dplyr::filter(year>=param$year_min_Baseline & year <= param$year_max_Baseline) %>%
dplyr::select(-year) %>%
dplyr::rename(Tmax_baseline_obs = station_subset[idx])
baseline_station_Tmax_stats <- base::as.data.frame(apply(baseline_station_Tmax,2,summary))
# future period
futurePeriod_station_Tmax <- PT_sim$T_gen$output$Tx_gen %>% tibble::as_tibble() %>% dplyr::select(station_subset[idx])
if (is.null(clim_scen)){
futurePeriod_station_Tmax <- futurePeriod_station_Tmax %>% dplyr::rename(Tmax_baseline_sim = station_subset[idx])
} else {
futurePeriod_station_Tmax <- futurePeriod_station_Tmax %>% dplyr::rename(Tmax_futurePeriod_sim = station_subset[idx])
}
futurePeriod_station_Tmax_stats <- base::as.data.frame(apply(futurePeriod_station_Tmax,2,summary))
# clim_stats final join
climStats[[idx]] <- baseline_station_P_stats %>%
add_column(futurePeriod_station_P_stats, baseline_station_Tmin_stats, futurePeriod_station_Tmin_stats,
baseline_station_Tmax_stats, futurePeriod_station_Tmax_stats)
}
idx
idx <- 1
# PRECIPITATION
# baseline period
baseline_station_P <- station_data$PRECIPITATION %>%
dplyr::select(year,station_subset[idx]) %>%
dplyr::filter(year>=param$year_min_Baseline & year <= param$year_max_Baseline) %>%
dplyr::select(-year) %>%
dplyr::rename(P_baseline_obs = station_subset[idx])
param$year_min_Baseline <- 2004
param$year_max_Baseline <- 2013
clim_scen <- NULL
summaryStats <- wgen_daily_summaryStats(PT_sim, param, station_data, station_subset,clim_scen)
# Temperature summary statistics for Alishur_2 station (elevation band)
summaryStats$summaryStats_temp
# Precipitation summary statistics for Alishur_2 station (elevation band)
summaryStats$summaryStats_precip
summaryStats
param$year_min_Baseline <- 2004
param$year_max_Baseline <- 2013
clim_scen <- NULL
# Computing the baseline statistics and comparing it with simulated weather over the same period.
summaryStats <- wgen_daily_summaryStats(PT_sim, param, station_data, station_subset,clim_scen)
# Summary statistics for the station (i.e. elevation band) Alishur_2
summaryStats$Alishur_2
knitr::include_graphics("./_bookdown_files/FIG_DATA/RMAWGEN_Models_CoupledModel_monthlyTotalsComparison.jpg")
?save
pathF <- './data/AmuDarya/GuntYashikul/ClimateProjections/'
save(PT_sim,list = 'PT_sim',file = paste0(pathF,'PT_sim','.rda'))
pathF <- './data/AmuDarya/GuntYashikul/ClimateProjections/'
load(paste0(pathF,'PT_sim.rda'))
pathF <- './data/AmuDarya/GuntYashikul/ClimateProjections/'
save(param,PT_sim,list = c('param','PT_sim'),file = paste0(pathF,'PT_sim','.rda'))
pathF <- './data/AmuDarya/GuntYashikul/ClimateProjections/'
save(PT_sim,list = 'PT_sim',file = paste0(pathF,'PT_sim','.rda'))
save(param,list = 'param',file = paste0(pathF,'param','.rda'))
save(station_data,list = 'station_data',file = paste0(pathF,'station_data','.rda'))
save(station_subset,list = 'station_subset',file = paste0(pathF,'station_subset','.rda'))
pathF <- './data/AmuDarya/GuntYashikul/ClimateProjections/'
load(paste0(pathF,'PT_sim.rda'))
load(paste0(pathF,'param.rda'))
load(paste0(pathF,'station_data.rda'))
load(paste0(pathF,'station_subset.rda'))
# Simulation periods
param$year_min_Baseline <- 2004
param$year_max_Baseline <- 2013
param$year_min_sim_Period1 <-  2051
param$year_max_sim_Period1 <-  2060
param$year_min_sim_Period2 <-  2091
param$year_max_sim_Period2 <-  2100
basin_climScen_Path <- './data/AmuDarya/GuntYashikul/ClimateProjections/'
basin_climScen_File <- 'climScen_monthly'
clim_scen <- climateScenarioPreparation_RMAWGEN(basin_climScen_Path,basin_climScen_File,param)
# Tidy data wrangling
library(tidyverse)
library(here)
library(timetk)
library(tidymodels)
library(lubridate)
library(timetk)
# ggplot add-on
devtools::install_github("eliocamp/ggnewscale")
library(ggnewscale)
library(ggpubr)
# Covenience library for plotting multi-layer raster
library(rasterVis)
library(viridis)
library(RColorBrewer)
# Our own package for load and processing local data
devtools::install_github("hydrosolutions/riversCentralAsia") # ensuring the latest version is installed!
library('riversCentralAsia')
# Spatial data processing
library(ncdf4)
library(raster)
library(rgdal)
library(sf)
library(smoothr)
library(units)
# Install GitHub version
library(devtools)
install_github("ecor/RMAWGEN")
library(RMAWGEN)
pathF <- './data/AmuDarya/GuntYashikul/ClimateProjections/'
load(paste0(pathF,'PT_sim.rda'))
load(paste0(pathF,'param.rda'))
load(paste0(pathF,'station_data.rda'))
load(paste0(pathF,'station_subset.rda'))
param$year_min_Baseline <- 2004
param$year_max_Baseline <- 2013
clim_scen <- NULL
# Computing the baseline statistics and comparing it with simulated weather over the same period.
summaryStats <- wgen_daily_summaryStats(PT_sim, param, station_data, station_subset,clim_scen)
# Summary statistics for the station (i.e. elevation band) Alishur_2
summaryStats$Alishur_2
knitr::include_graphics("./_bookdown_files/FIG_DATA/RMAWGEN_Models_CoupledModel_monthlyTotalsComparison.jpg")
# Simulation periods
param$year_min_Baseline <- 2004
param$year_max_Baseline <- 2013
param$year_min_sim_Period1 <-  2051
param$year_max_sim_Period1 <-  2060
param$year_min_sim_Period2 <-  2091
param$year_max_sim_Period2 <-  2100
basin_climScen_Path <- './data/AmuDarya/GuntYashikul/ClimateProjections/'
basin_climScen_File <- 'climScen_monthly'
clim_scen <- climateScenarioPreparation_RMAWGEN(basin_climScen_Path,basin_climScen_File,param)
# Compute stochastic weather for a subset of 2 sample stations for the target period 2051
clim_scen_Period1 <- clim_scen$rcp45_MIROC5_Period1
clim_scen_Period2 <- clim_scen$rcp45_MIROC5_Period2
station_subset <- station_data$STATION_NAMES[1:2] # Selecting 2 example stations, i.e. Alishur_2 and Alishur_3
PT_sim_Period1 <- wgen_daily_PT(param,station_data,station_subset,clim_scen_Period1)
PT_sim_Period2 <- wgen_daily_PT(param,station_data,station_subset,clim_scen_Period2)
# Compute stochastic weather for a subset of 2 sample stations for the target period 2051
clim_scen_Period1 <- clim_scen$rcp45_MIROC5_Period1
clim_scen_Period2 <- clim_scen$rcp45_MIROC5_Period2
station_subset <- NULL # We compute climate procjections for all subasin elevation bands.
PT_sim_Period1 <- wgen_daily_PT(param,station_data,station_subset,clim_scen_Period1)
PT_sim_Period2 <- wgen_daily_PT(param,station_data,station_subset,clim_scen_Period2)
pathF <- './data/AmuDarya/GuntYashikul/ClimateProjections/'
save(PT_sim_Period1,list = 'PT_sim_Period1',file = paste0(pathF,'PT_sim_Period1','.rda'))
save(PT_sim_Period2,list = 'PT_sim_Period2',file = paste0(pathF,'PT_sim_Period2','.rda'))
save(param,list = 'param',file = paste0(pathF,'param_sim_Period12','.rda'))
PT_sim_Period1 %>% lsos()
PT_sim_Period1 %>% object.size()
PT_sim_Period1 %>% object.size() %>% units("kB")
PT_sim_Period1 %>% object.size() /10^6
PT_sim_Period1 %>% sort( sapply(mget(ls()),object.size) )
sort( sapply(mget(ls(PT_sim_Period1)),object.size) )
sort( sapply(mget(ls(PT_sim_Period1$P_gen)),object.size) )
sort( sapply(mget(ls(PT_sim_Period1$P_gen$data_prec)),object.size) )
PT_sim_Period1 %>% object.size()
PT_sim_Period1$P_gen %>% object.size()
PT_sim_Period1 %>% list2env(.,envir = .GlobalEnv)
PT_sim_Period1$T_gen %>% list2env(.,envir = .GlobalEnv)
PT_sim_Period1$T_gen$var %>% list2env(.,envir = .GlobalEnv)
PT_sim$P_gen$var = NULL
pathF <- './data/AmuDarya/GuntYashikul/ClimateProjections/'
save(PT_sim,list = 'PT_sim',file = paste0(pathF,'PT_sim','.rda'))
save(param,list = 'param',file = paste0(pathF,'param','.rda'))
save(station_data,list = 'station_data',file = paste0(pathF,'station_data','.rda'))
save(station_subset,list = 'station_subset',file = paste0(pathF,'station_subset','.rda'))
PT_sim$T_gen$var = NULL
save(PT_sim,list = 'PT_sim',file = paste0(pathF,'PT_sim','.rda'))
detach("package:riversCentralAsia", unload=TRUE)
library(riversCentralAsia)
# 1. Station Data
## Load and process RS MINERVE csv database file
filePath <- './data/AmuDarya/GuntYashikul/RSMinerve/'
fileName <- 'Gunt_Yashikul_1981_2013_db.csv'
era5_gunt_yashikul <- read.table(paste0(filePath,fileName),sep=',') %>% as_tibble()
## Delete unused catchments in the Gunt-Yashikul hydrological model (this is specific to the model and does not need to be carried out normally)
idx2del <- (era5_gunt_yashikul[1,]=='Gunt_DS_1') | (era5_gunt_yashikul[1,]=='Gunt_DS_2') |
(era5_gunt_yashikul[1,]=='Gunt_DS_3')
era5_gunt_yashikul <- era5_gunt_yashikul %>% dplyr::select(which(!idx2del))
## Generate list containing all station data (this is an input to the wgen_daily_PT() function)
station_data <- prepare_RMAWGEN_input_data(era5_gunt_yashikul)
# 2. RMAWGEN PARAMETERS
## Note: all parameteres are stored in the param list
param <- list()
## Random generator seed
param$seed <- 123456
## Monthly climate is calculated if it is set to NULL
param$PREC_CLIMATE <- NULL
## Calibration Period
param$year_min <- 1981
param$year_max <- 2013
param$origin <- "1981-1-1"
## n GPCA iterations for variable and VAR residuals
param$n_GPCA_iter <- 0
param$n_GPCA_iteration_residuals <- 0
param$n_GPCA_iter_prec <- 0
param$n_GPCA_iteration_residuals_prec <- 0
## Autoregressive order (p)
param$p <- 1
# number of weather realizations
param$nscenario <- 1
# Multi-site stations
param$station <- station_data$STATION_NAMES
# Minimum precipitation cutoff value, i.e. threshold value below which a no precipitation event is recorded [in mm/day]
param$valmin <- 1.0
# 3. Compute stochastic weather for a subset of 2 sample stations for the calibration period 1981 - 2013
clim_scen <- NULL # We not yet simulate future climate. This follows in the next Subsection below.
station_subset <- station_data$STATION_NAMES[1:2] # Selecting 2 example stations, i.e. Alishur_2 and Alishur_3. Normally, one wants to run the function for all stations.
PT_sim <- wgen_daily_PT(param,station_data,station_subset,clim_scen)
# The VAR models stored are big. They can be deleted when files should be stored on the disk.
# PT_sim$P_gen$var = NULL
# PT_sim$T_gen$var = NULL
detach("package:riversCentralAsia", unload=TRUE)
library(riversCentralAsia)
# 1. Station Data
## Load and process RS MINERVE csv database file
filePath <- './data/AmuDarya/GuntYashikul/RSMinerve/'
fileName <- 'Gunt_Yashikul_1981_2013_db.csv'
era5_gunt_yashikul <- read.table(paste0(filePath,fileName),sep=',') %>% as_tibble()
## Delete unused catchments in the Gunt-Yashikul hydrological model (this is specific to the model and does not need to be carried out normally)
idx2del <- (era5_gunt_yashikul[1,]=='Gunt_DS_1') | (era5_gunt_yashikul[1,]=='Gunt_DS_2') |
(era5_gunt_yashikul[1,]=='Gunt_DS_3')
era5_gunt_yashikul <- era5_gunt_yashikul %>% dplyr::select(which(!idx2del))
## Generate list containing all station data (this is an input to the wgen_daily_PT() function)
station_data <- prepare_RMAWGEN_input_data(era5_gunt_yashikul)
# 2. RMAWGEN PARAMETERS
## Note: all parameteres are stored in the param list
param <- list()
## Random generator seed
param$seed <- 123456
## Monthly climate is calculated if it is set to NULL
param$PREC_CLIMATE <- NULL
## Calibration Period
param$year_min <- 1981
param$year_max <- 2013
param$origin <- "1981-1-1"
## n GPCA iterations for variable and VAR residuals
param$n_GPCA_iter <- 0
param$n_GPCA_iteration_residuals <- 0
param$n_GPCA_iter_prec <- 0
param$n_GPCA_iteration_residuals_prec <- 0
## Autoregressive order (p)
param$p <- 1
# number of weather realizations
param$nscenario <- 1
# Multi-site stations
param$station <- station_data$STATION_NAMES
# Minimum precipitation cutoff value, i.e. threshold value below which a no precipitation event is recorded [in mm/day]
param$valmin <- 1.0
# 3. Compute stochastic weather for a subset of 2 sample stations for the calibration period 1981 - 2013
clim_scen <- NULL # We not yet simulate future climate. This follows in the next Subsection below.
station_subset <- station_data$STATION_NAMES[1:2] # Selecting 2 example stations, i.e. Alishur_2 and Alishur_3. Normally, one wants to run the function for all stations.
# Return VAR model?
param$returnVARModel = FALSE
PT_sim <- wgen_daily_PT(param,station_data,station_subset,clim_scen,returnVARModel)
PT_sim <- wgen_daily_PT(param,station_data,station_subset,clim_scen,param$returnVARModel)
pathF <- './data/AmuDarya/GuntYashikul/ClimateProjections/'
save(PT_sim,list = 'PT_sim',file = paste0(pathF,'PT_sim','.rda'))
save(param,list = 'param',file = paste0(pathF,'param','.rda'))
save(station_data,list = 'station_data',file = paste0(pathF,'station_data','.rda'))
save(station_subset,list = 'station_subset',file = paste0(pathF,'station_subset','.rda'))
# Simulation periods
param$year_min_Baseline <- 2004
param$year_max_Baseline <- 2013
param$year_min_sim_Period1 <-  2051
param$year_max_sim_Period1 <-  2060
param$year_min_sim_Period2 <-  2091
param$year_max_sim_Period2 <-  2100
basin_climScen_Path <- './data/AmuDarya/GuntYashikul/ClimateProjections/'
basin_climScen_File <- 'climScen_monthly'
clim_scen <- climateScenarioPreparation_RMAWGEN(basin_climScen_Path,basin_climScen_File,param)
# Compute stochastic weather for a subset of 2 sample stations for the target period 2051
clim_scen_Period1 <- clim_scen$rcp45_MIROC5_Period1
clim_scen_Period2 <- clim_scen$rcp45_MIROC5_Period2
station_subset <- NULL # We compute climate procjections for all subasin elevation bands.
# Return VAR model?
param$returnVARModel = FALSE
# Fire up the stochastic VAR machine
PT_sim_Period1 <- wgen_daily_PT(param,station_data,station_subset,clim_scen_Period1,param$returnVARModel)
PT_sim_Period2 <- wgen_daily_PT(param,station_data,station_subset,clim_scen_Period2,param$returnVARModel)
pathF <- './data/AmuDarya/GuntYashikul/ClimateProjections/'
save(PT_sim_Period1,list = 'PT_sim_Period1',file = paste0(pathF,'PT_sim_Period1','.rda'))
save(PT_sim_Period2,list = 'PT_sim_Period2',file = paste0(pathF,'PT_sim_Period2','.rda'))
save(param,list = 'param',file = paste0(pathF,'param_sim_Period12','.rda'))
clim_scen
View(clim_scen)
clim_scen %>% length()
# Compute stochastic weather for a subset of 2 sample stations for the target period 2051
clim_scen_Period1 <- clim_scen$rcp45_MIROC5_Period1
clim_scen_Period2 <- clim_scen$rcp45_MIROC5_Period2
# Compute for all stations
station_subset <- NULL # We compute climate procjections for all subasin elevation bands.
# Return VAR model?
param$returnVARModel = FALSE
# Fire up the stochastic VAR machine
#PT_sim_Period1 <- wgen_daily_PT(param,station_data,station_subset,clim_scen_Period1,param$returnVARModel)
#PT_sim_Period2 <- wgen_daily_PT(param,station_data,station_subset,clim_scen_Period2,param$returnVARModel)
PT_sim_all <- list()
# Loop through all climate scenarios and run models
for (idx in 1:length(clim_scen)){
print(idx)
PT_sim_all[[idx]] <- wgen_daily_PT(param,station_data,station_subset,clim_scen[[idx]],param$returnVARModel)
}
names(PT_sim_all) <- names(clim_scen)
View(PT_sim_all)
detach("package:riversCentralAsia", unload=TRUE)
library(riversCentralAsia)
# Tidy data wrangling
library(tidyverse)
library(here)
library(timetk)
library(tidymodels)
library(lubridate)
library(timetk)
# ggplot add-on
devtools::install_github("eliocamp/ggnewscale")
library(ggnewscale)
library(ggpubr)
# Covenience library for plotting multi-layer raster
library(rasterVis)
library(viridis)
library(RColorBrewer)
# Our own package for load and processing local data
#devtools::install_github("hydrosolutions/riversCentralAsia") # ensuring the latest version is installed!
library('riversCentralAsia')
# Spatial data processing
library(ncdf4)
library(raster)
library(rgdal)
library(sf)
library(smoothr)
library(units)
knitr::include_graphics('_bookdown_files/FIG_DATA/ModelChain_ClimateImpactStudy.png')
# 1. Station Data
## Load and process RS MINERVE csv database file
filePath <- './data/AmuDarya/GuntYashikul/RSMinerve/'
fileName <- 'Gunt_Yashikul_1981_2013_db.csv'
era5_gunt_yashikul <- read.table(paste0(filePath,fileName),sep=',') %>% as_tibble()
# Tidy data wrangling
library(tidyverse)
library(here)
library(timetk)
library(tidymodels)
library(lubridate)
library(timetk)
# ggplot add-on
devtools::install_github("eliocamp/ggnewscale")
library(ggnewscale)
library(ggpubr)
# Covenience library for plotting multi-layer raster
library(rasterVis)
library(viridis)
library(RColorBrewer)
# Our own package for load and processing local data
devtools::install_github("hydrosolutions/riversCentralAsia") # ensuring the latest version is installed!
library('riversCentralAsia')
# Spatial data processing
library(ncdf4)
library(raster)
library(rgdal)
library(sf)
library(smoothr)
library(units)
# Install GitHub version
library(devtools)
install_github("ecor/RMAWGEN")
library(RMAWGEN)
# 1. Station Data
## Load and process RS MINERVE csv database file
filePath <- './data/AmuDarya/GuntYashikul/RSMinerve/'
fileName <- 'Gunt_Yashikul_1981_2013_db.csv'
era5_gunt_yashikul <- read.table(paste0(filePath,fileName),sep=',') %>% as_tibble()
## Delete unused catchments in the Gunt-Yashikul hydrological model (this is specific to the model and does not need to be carried out normally)
idx2del <- (era5_gunt_yashikul[1,]=='Gunt_DS_1') | (era5_gunt_yashikul[1,]=='Gunt_DS_2') |
(era5_gunt_yashikul[1,]=='Gunt_DS_3')
era5_gunt_yashikul <- era5_gunt_yashikul %>% dplyr::select(which(!idx2del))
## Generate list containing all station data (this is an input to the wgen_daily_PT() function)
station_data <- prepare_RMAWGEN_input_data(era5_gunt_yashikul)
# 2. RMAWGEN PARAMETERS
## Note: all parameteres are stored in the param list
param <- list()
## Random generator seed
param$seed <- 123456
## Monthly climate is calculated if it is set to NULL
param$PREC_CLIMATE <- NULL
## Calibration Period
param$year_min <- 1981
param$year_max <- 2013
param$origin <- "1981-1-1"
## n GPCA iterations for variable and VAR residuals
param$n_GPCA_iter <- 0
param$n_GPCA_iteration_residuals <- 0
param$n_GPCA_iter_prec <- 0
param$n_GPCA_iteration_residuals_prec <- 0
## Autoregressive order (p)
param$p <- 1
# number of weather realizations
param$nscenario <- 1
# Multi-site stations
param$station <- station_data$STATION_NAMES
# Minimum precipitation cutoff value, i.e. threshold value below which a no precipitation event is recorded [in mm/day]
param$valmin <- 1.0
# 3. Compute stochastic weather for a subset of 2 sample stations for the calibration period 1981 - 2013
clim_scen <- NULL # We not yet simulate future climate. This follows in the next Subsection below.
station_subset <- station_data$STATION_NAMES[1:2] # Selecting 2 example stations, i.e. Alishur_2 and Alishur_3. Normally, one wants to run the function for all stations.
# Return VAR model? If we set this parameter to false, the output size of the PT_sim variable will be greatly reduced.
param$returnVARModel = FALSE
# Fire up the stochastic VAR machine
PT_sim <- wgen_daily_PT(param,station_data,station_subset,clim_scen,param$returnVARModel)
pathF <- './data/AmuDarya/GuntYashikul/ClimateProjections/'
save(PT_sim,list = 'PT_sim',file = paste0(pathF,'PT_sim','.rda'))
save(param,list = 'param',file = paste0(pathF,'param','.rda'))
save(station_data,list = 'station_data',file = paste0(pathF,'station_data','.rda'))
save(station_subset,list = 'station_subset',file = paste0(pathF,'station_subset','.rda'))
param$year_min_Baseline <- 2004
param$year_max_Baseline <- 2013
clim_scen <- NULL
# Computing the baseline statistics and comparing it with simulated weather over the same period.
summaryStats <- wgen_daily_summaryStats(PT_sim, param, station_data, station_subset,clim_scen)
# Summary statistics for the station (i.e. elevation band) Alishur_2
summaryStats$Alishur_2
